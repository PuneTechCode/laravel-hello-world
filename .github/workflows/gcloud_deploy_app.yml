name: Deploy app on Google VM

on:
  push:
    branches: [ "google-cloud-deploy" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ec2_ips: ${{ steps.get_ips.outputs.ec2_ips }}

    steps:
        - uses: shivammathur/setup-php@main
          with:
            php-version: '8.3'
        - uses: actions/checkout@v4

        - name: Copy .env
          run: php -r "file_exists('.env') || copy('.env.example', '.env');"

        - name: Install Dependencies
          run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

        - name: Execute db migrate command
          run: |
           mkdir -p database
           touch database/database.sqlite
           php artisan migrate --no-interaction -vvv

        - name: Create deployment artifact
          run: tar -czf ${{ github.sha }}.tar.gz --exclude=*.git --exclude=tests *
        
        - name: Store artifact for distribution
          uses: actions/upload-artifact@v4
          with:
            name: app-build
            path: ${{ github.sha }}.tar.gz
        
        - name: configure gcloud
          uses: 'google-github-actions/auth@v2'
          with:
            credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
        
        - name: Get VM instance public IP
          id: get_ips
          run: |
            PUBLIC_IPS=$(gcloud compute instances list --filter="labels.managed_by=terraform AND status:RUNNING" --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
            echo "Fetched IPs: $PUBLIC_IPS"
            # Convert newline-separated IPs to a JSON array for GitHub Actions matrix
            ips_json=$(echo "$PUBLIC_IPS" | jq -R -s -c 'split("\n")[:-1]')
            echo "IPs JSON: $ips_json"
            echo "::set-output name=ec2_ips::$ips_json"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ fromJson(needs.build.outputs.ec2_ips) != '[]' }}
    strategy:
        matrix:
            ip: ${{ fromJson(needs.build.outputs.ec2_ips) }}
    steps:
        - uses: actions/download-artifact@v4
          with:
            name: app-build

        - name: print ip
          run: echo ${{ matrix.ip }}

        - name: Public IP
          id: ip
          uses: haythem/public-ip@v1.3

        - name: configure gcloud
          uses: 'google-github-actions/auth@v2'
          with:
            credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

        - name: Add Firewall Rule to Allow SSH
          run: |
            gcloud compute firewall-rules create allow-ssh-${{ matrix.ip }} \
            --source-ranges="${{ steps.ip.outputs.ipv4 }}/32"
            --allow=tcp:22
            --direction=INGRESS
            --priority=1000
            --target-tags=terraform

        - name: Upload
          uses: appleboy/scp-action@v0.1.3
          with:
            host: ${{ matrix.ip }}
            username: punesre
            key: ${{ secrets.SSH_KEY }}
            port: 22
            source: ${{ github.sha }}.tar.gz
            target: /var/www/html/artifacts

        - name: executing remote ssh commands using ssh key
          uses: appleboy/ssh-action@v1.0.3
          with:
            host: ${{ matrix.ip }}
            username: punesre
            key: ${{ secrets.SSH_KEY }}
            port: 22
            script: hostname

        - name: Extract archive and create directories
          uses: appleboy/ssh-action@master
          env:
           GITHUB_SHA: ${{ github.sha }}
          with:
            host: ${{ matrix.ip }}
            username: punesre
            key: ${{ secrets.SSH_KEY }}
            port: 22
            envs: GITHUB_SHA
            script: |
                mkdir -p "/var/www/html/releases/${GITHUB_SHA}"
                tar xzf /var/www/html/artifacts/${GITHUB_SHA}.tar.gz -C "/var/www/html/releases/${GITHUB_SHA}"
                rm -rf /var/www/html/releases/${GITHUB_SHA}/storage
        
                mkdir -p /var/www/html/storage/{app,public,framework,logs}
                mkdir -p /var/www/html/storage/framework/{cache,sessions,testing,views}
                sudo chmod -R 0777 /var/www/html/storage 

        - name: Activate release
          uses: appleboy/ssh-action@master
          env:
            GITHUB_SHA: ${{ github.sha }}
            RELEASE_PATH: /var/www/html/releases/${{ github.sha }}
            ACTIVE_RELEASE_PATH: /var/www/html/current
            STORAGE_PATH: /var/www/html/storage
            BASE_PATH: /var/www/html
            LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
          with:
            host: ${{ matrix.ip }}
            username: punesre
            key: ${{ secrets.SSH_KEY }}
            port: 22
            envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,LARAVEL_ENV
            script: |
                printf "%s" "$LARAVEL_ENV" > "${BASE_PATH}/.env"
                ln -s -f ${BASE_PATH}/.env $RELEASE_PATH
                ln -s -f $STORAGE_PATH $RELEASE_PATH
                ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
                sudo chmod -R 0777 /var/www/html/current 
                cd /var/www/html/current && php artisan key:generate

        - name: Run after hooks
          uses: appleboy/ssh-action@master
          env:
            RELEASES_PATH: /var/www/html/releases
            ARTIFACTS_PATH: /var/www/html/artifacts
          with:
              host: ${{ matrix.ip }}
              username: punesre
              key: ${{ secrets.SSH_KEY }}
              port: 22
              envs: RELEASES_PATH, ARTIFACTS_PATH
              script: |
                cd $RELEASES_PATH && ls -t -1 | tail -n +3 | xargs rm -rf
                cd $ARTIFACTS_PATH && ls -t -1 | tail -n +3 | xargs rm -rf

        - name: Remove Firewall Rule to Allow SSH
          if: always()
          run: |
            gcloud compute firewall-rules delete allow-ssh-${{ matrix.ip }} --quiet

        