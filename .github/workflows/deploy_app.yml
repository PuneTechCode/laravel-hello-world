name: Deploy app on EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  get_ec2_ip:
    runs-on: ubuntu-latest
    outputs:
      ec2_ips: ${{ steps.get_ips.outputs.ec2_ips }}

    steps:
        - uses: shivammathur/setup-php@main
          with:
            php-version: '8.3'
        - uses: actions/checkout@v4

        - name: Copy .env
          run: php -r "file_exists('.env') || copy('.env.example', '.env');"

        - name: Install Dependencies
          run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

        - name: Generate key
          run: php artisan key:generate

        - name: Execute db migrate command
          run: |
           mkdir -p database
           touch database/database.sqlite
           php artisan migrate --no-interaction -vvv

        - name: Create deployment artifact
          run: tar -czf ${{ github.sha }}.tar.gz --exclude=*.git --exclude=tests *
        
        - name: Store artifact for distribution
          uses: actions/upload-artifact@v4
          with:
            name: app-build
            path: ${{ github.sha }}.tar.gz

        - name: Configure AWS CLI
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-region: ap-south-1 # change to your desired region

        - name: Get EC2 instance public IP
          id: get_ips
          run: |
            INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=tag:App,Values=laravel" "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].InstanceId" --output text)
            if [ -z "$INSTANCE_IDS" ]; then
                echo "No EC2 instances found with tag appname=laravel."
                echo "::set-output name=ec2_ips::[]"
                exit 0
            fi

            PUBLIC_IPS=$(aws ec2 describe-instances --instance-ids $INSTANCE_IDS --query "Reservations[*].Instances[*].PublicIpAddress" --output json)
            echo "::set-output name=ec2_ips::$PUBLIC_IPS"
            FLATTENED_IPS=$(echo $PUBLIC_IPS | jq -c '. | flatten')
          
            # Check if FLATTENED_IPS is empty
            if [ "$FLATTENED_IPS" == "null" ]; then
                echo "::set-output name=ec2_ips::[]"
            else
                echo "::set-output name=ec2_ips::$FLATTENED_IPS"
            fi

  ssh_to_ec2:
    runs-on: ubuntu-latest
    needs: get_ec2_ip
    if: ${{ fromJson(needs.get_ec2_ip.outputs.ec2_ips) != '[]' }}
    strategy:
        matrix:
            ip: ${{ fromJson(needs.get_ec2_ip.outputs.ec2_ips) }}
    steps:
        - uses: actions/download-artifact@v4
          with:
            name: app-build

        - name: Upload
          uses: appleboy/scp-action@209e8c05e0492f6ed6fe8a22dfcaefb083c4cf35
          with:
            host: ${{ matrix.ip }}
            username: ec2-user
            key: ${{ secrets.SSH_KEY }}
            port: 22
            source: ${{ github.sha }}.tar.gz
            target: /var/www/html/artifacts

        - name: executing remote ssh commands using ssh key
          uses: appleboy/ssh-action@v1.0.3
          with:
            host: ${{ matrix.ip }}
            username: ec2-user
            key: ${{ secrets.SSH_KEY }}
            port: 22
            script: hostname

        - name: Extract archive and create directories
          uses: appleboy/ssh-action@master
          env:
           GITHUB_SHA: ${{ github.sha }}
          with:
            host: ${{ matrix.ip }}
            username: ec2-user
            key: ${{ secrets.SSH_KEY }}
            port: 22
            envs: GITHUB_SHA
            script: |
                mkdir -p "/var/www/html/releases/${GITHUB_SHA}"
                tar xzf /var/www/html/artifacts/${GITHUB_SHA}.tar.gz -C "/var/www/html/releases/${GITHUB_SHA}"
                rm -rf /var/www/html/releases/${GITHUB_SHA}/storage
        
                mkdir -p /var/www/html/storage/{app,public,framework,logs}
                mkdir -p /var/www/html/storage/framework/{cache,sessions,testing,views}
                chmod -R 0777 /var/www/html/storage
